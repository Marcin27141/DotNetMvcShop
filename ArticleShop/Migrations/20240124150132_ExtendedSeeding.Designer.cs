// <auto-generated />
using System;
using ArticleShop.Models.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ArticleShop.Migrations
{
    [DbContext(typeof(ShopDbContext))]
    [Migration("20240124150132_ExtendedSeeding")]
    partial class ExtendedSeeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ArticleShop.Models.Database.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("301cc0c9-0a74-4d57-a590-4a715a0e8250"),
                            CategoryId = new Guid("d772208c-39f3-4e46-a454-00ee849ecb32"),
                            ExpiryDate = new DateOnly(2023, 12, 20),
                            ImagePath = "/image/no_image.jpg",
                            Name = "Chocolate bar",
                            Price = 2.34m
                        },
                        new
                        {
                            Id = new Guid("d934bdb2-7077-44dd-a254-9024df5d3a23"),
                            CategoryId = new Guid("d772208c-39f3-4e46-a454-00ee849ecb32"),
                            ExpiryDate = new DateOnly(2024, 1, 1),
                            ImagePath = "/image/no_image.jpg",
                            Name = "Spaghetti",
                            Price = 9.99m
                        },
                        new
                        {
                            Id = new Guid("76de2ad3-58f8-4823-994d-80e7e2d99d91"),
                            CategoryId = new Guid("48785f02-5491-4bb7-a051-51c8f5883650"),
                            ExpiryDate = new DateOnly(2033, 12, 20),
                            ImagePath = "/image/no_image.jpg",
                            Name = "Bird cage",
                            Price = 47.29m
                        },
                        new
                        {
                            Id = new Guid("221a0318-3994-4e56-a55f-57a502c647cd"),
                            CategoryId = new Guid("48785f02-5491-4bb7-a051-51c8f5883650"),
                            ExpiryDate = new DateOnly(2033, 12, 20),
                            ImagePath = "/image/no_image.jpg",
                            Name = "Dog collar",
                            Price = 29.10m
                        },
                        new
                        {
                            Id = new Guid("8e66d6eb-b329-4491-ad42-923ce8e6b638"),
                            CategoryId = new Guid("48785f02-5491-4bb7-a051-51c8f5883650"),
                            ExpiryDate = new DateOnly(2026, 5, 20),
                            ImagePath = "/image/no_image.jpg",
                            Name = "Leash",
                            Price = 12.00m
                        },
                        new
                        {
                            Id = new Guid("1e82b774-0ab1-4c12-9399-e69121e07382"),
                            CategoryId = new Guid("d5ac95c8-c8a4-4e4a-a364-266db8362152"),
                            ExpiryDate = new DateOnly(2034, 7, 7),
                            ImagePath = "/image/no_image.jpg",
                            Name = "Flute coursebook",
                            Price = 10.00m
                        },
                        new
                        {
                            Id = new Guid("553daff2-03df-4126-ab17-c731a352ec77"),
                            CategoryId = new Guid("d5ac95c8-c8a4-4e4a-a364-266db8362152"),
                            ExpiryDate = new DateOnly(2027, 1, 1),
                            ImagePath = "/image/no_image.jpg",
                            Name = "Guitar",
                            Price = 100.00m
                        },
                        new
                        {
                            Id = new Guid("1a93aaaa-cd5c-40ff-9318-3c1b97564eee"),
                            CategoryId = new Guid("d5ac95c8-c8a4-4e4a-a364-266db8362152"),
                            ExpiryDate = new DateOnly(2027, 1, 1),
                            ImagePath = "/image/no_image.jpg",
                            Name = "Trumpet",
                            Price = 27.00m
                        },
                        new
                        {
                            Id = new Guid("57ae92a3-0ce4-4dd6-90df-b8431e840aeb"),
                            CategoryId = new Guid("10642812-da15-44dd-92e8-41c8007e2b7b"),
                            ExpiryDate = new DateOnly(2043, 1, 1),
                            ImagePath = "/image/no_image.jpg",
                            Name = "Gloomhaven",
                            Price = 80.99m
                        },
                        new
                        {
                            Id = new Guid("7c2e49a8-037f-4604-8e41-077dfb6d1c5b"),
                            CategoryId = new Guid("10642812-da15-44dd-92e8-41c8007e2b7b"),
                            ExpiryDate = new DateOnly(2033, 1, 1),
                            ImagePath = "/image/no_image.jpg",
                            Name = "Ark Nova",
                            Price = 75.28m
                        },
                        new
                        {
                            Id = new Guid("7cabe173-6454-464d-a24e-045235801846"),
                            CategoryId = new Guid("10642812-da15-44dd-92e8-41c8007e2b7b"),
                            ExpiryDate = new DateOnly(2029, 1, 1),
                            ImagePath = "/image/no_image.jpg",
                            Name = "Wingspan",
                            Price = 42.68m
                        });
                });

            modelBuilder.Entity("ArticleShop.Models.Database.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPromo")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7a8697a6-1a52-4c38-b698-eaa4fa908955"),
                            IsPromo = false,
                            Name = "Others"
                        },
                        new
                        {
                            Id = new Guid("d772208c-39f3-4e46-a454-00ee849ecb32"),
                            IsPromo = false,
                            Name = "Food"
                        },
                        new
                        {
                            Id = new Guid("10642812-da15-44dd-92e8-41c8007e2b7b"),
                            IsPromo = false,
                            Name = "Board Game"
                        },
                        new
                        {
                            Id = new Guid("b9c80e67-698a-4a6f-a980-af1b14b673a6"),
                            IsPromo = false,
                            Name = "Computer Game"
                        },
                        new
                        {
                            Id = new Guid("fd4b1015-844d-4aae-9fa7-a83a7213bfa5"),
                            IsPromo = false,
                            Name = "Book"
                        },
                        new
                        {
                            Id = new Guid("ca9c31b4-80b7-43ef-ab74-65affc726ce5"),
                            IsPromo = false,
                            Name = "Furniture"
                        },
                        new
                        {
                            Id = new Guid("d5ac95c8-c8a4-4e4a-a364-266db8362152"),
                            IsPromo = false,
                            Name = "Music"
                        },
                        new
                        {
                            Id = new Guid("94e0c3ed-917d-4911-a469-f3a8916fd34c"),
                            IsPromo = false,
                            Name = "School"
                        },
                        new
                        {
                            Id = new Guid("48785f02-5491-4bb7-a051-51c8f5883650"),
                            IsPromo = false,
                            Name = "Animals"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ArticleShop.Models.Database.Article", b =>
                {
                    b.HasOne("ArticleShop.Models.Database.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
